// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nsmak/otus_hw/hw12_13_14_15_calendar/internal/app (interfaces: Storage)

// Package app_test is a generated GoMock package.
package app_test

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	app "github.com/nsmak/otus_hw/hw12_13_14_15_calendar/internal/app"
	reflect "reflect"
)

// MockStorage is a mock of Storage interface
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// EventList mocks base method
func (m *MockStorage) EventList(arg0 context.Context, arg1, arg2 int64) ([]app.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventList", arg0, arg1, arg2)
	ret0, _ := ret[0].([]app.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EventList indicates an expected call of EventList
func (mr *MockStorageMockRecorder) EventList(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventList", reflect.TypeOf((*MockStorage)(nil).EventList), arg0, arg1, arg2)
}

// NewEvent mocks base method
func (m *MockStorage) NewEvent(arg0 context.Context, arg1 app.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewEvent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// NewEvent indicates an expected call of NewEvent
func (mr *MockStorageMockRecorder) NewEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewEvent", reflect.TypeOf((*MockStorage)(nil).NewEvent), arg0, arg1)
}

// RemoveEvent mocks base method
func (m *MockStorage) RemoveEvent(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveEvent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveEvent indicates an expected call of RemoveEvent
func (mr *MockStorageMockRecorder) RemoveEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveEvent", reflect.TypeOf((*MockStorage)(nil).RemoveEvent), arg0, arg1)
}

// UpdateEvent mocks base method
func (m *MockStorage) UpdateEvent(arg0 context.Context, arg1 app.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEvent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEvent indicates an expected call of UpdateEvent
func (mr *MockStorageMockRecorder) UpdateEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEvent", reflect.TypeOf((*MockStorage)(nil).UpdateEvent), arg0, arg1)
}
